<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sweetmeat]]></title>
  <link href="http://sweetme.at/atom.xml" rel="self"/>
  <link href="http://sweetme.at/"/>
  <updated>2013-09-26T18:21:23-04:00</updated>
  <id>http://sweetme.at/</id>
  <author>
    <name><![CDATA[Chris Simpkins]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Automate Your Git Directory Initialization Workflow]]></title>
    <link href="http://sweetme.at/2013/09/26/automate-your-git-directory-initialization-workflow/"/>
    <updated>2013-09-26T09:11:00-04:00</updated>
    <id>http://sweetme.at/2013/09/26/automate-your-git-directory-initialization-workflow</id>
    <content type="html"><![CDATA[<p>Automate initialization of a directory with git, the initial tracking / staging of existing files, and your first commit with this script.  A README.md and .gitignore file come as a bonus&hellip;</p>

<!--More-->


<h2>Git Init + Git Add + Git Commit</h2>

<p>So, you are applying <a href="http://git-scm.com/">Git version control</a> to a new directory of files.  The standard sequence of commands looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git init
</span><span class='line'>git add .
</span><span class='line'>git commit -m "Initial commit"</span></code></pre></td></tr></table></div></figure>


<p>And then you hammer away at your project with git capturing all of your moves.</p>

<p>This script allows you to consolidate that series of commands into a single statement, and throws in blank README.md and .gitignore files.</p>

<h2>The Script</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># Scriptacular - gitinit.sh</span>
</span><span class='line'><span class="c"># Initialize a directory with git, stage and commit existing files</span>
</span><span class='line'><span class="c"># Copyright 2013 Christopher Simpkins</span>
</span><span class='line'><span class="c"># MIT License</span>
</span><span class='line'>
</span><span class='line'><span class="nv">FILE_TYPE</span><span class="o">=</span><span class="s2">&quot;.&quot;</span>
</span><span class='line'><span class="nv">INITIAL_COMMIT_MESSAGE</span><span class="o">=</span><span class="s2">&quot;Initial commit&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -d <span class="s2">&quot;.git&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;This directory has already been initialized with git.&quot;</span>
</span><span class='line'>  <span class="nb">exit </span>1
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span>git init
</span><span class='line'>  <span class="k">if</span> <span class="o">((</span> <span class="nv">$?</span> <span class="o">))</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="s2">&quot;Unable to initialize your directory&quot;</span>
</span><span class='line'>      <span class="nb">exit </span>1
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="k">  </span>git add <span class="s2">&quot;$FILE_TYPE&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">((</span> <span class="nv">$?</span> <span class="o">))</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="s2">&quot;Unable to stage files&quot;</span>
</span><span class='line'>      <span class="nb">exit </span>1
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="k">  </span>git commit -m <span class="s2">&quot;$INITIAL_COMMIT_MESSAGE&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">((</span> <span class="nv">$?</span> <span class="o">))</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="s2">&quot;Unable to create the initial commit&quot;</span>
</span><span class='line'>      <span class="nb">exit </span>1
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="k">  </span>touch README.md
</span><span class='line'>  touch .gitignore
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot; ----- &quot;</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;The directory was initialized and an initial commit was performed with the files matching the pattern &#39;$FILE_TYPE&#39;&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="https://github.com/chrissimpkins/scriptacular/blob/master/version-control/gitinit.sh">script is also available on my GitHub repository</a>.  Either copy and paste the code above or download the raw script file from the repository and then run <code>chmod 744 gitinit.sh</code> on the file to make the script executable.  The following sections assume that you saved it in the path <code>~/scripts/gitinit.sh</code>.</p>

<h2>Create a Bash Alias</h2>

<p>Create an alias for the shell script so that you don&rsquo;t have to type the full path to the script each time that you use it.  Open your bash startup file (either <code>.bash_profile</code> or <code>.bashrc</code>) and enter the following line to create the alias gitinit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">gitinit</span><span class="o">=</span><span class="s2">&quot;~/scripts/gitinit.sh&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use this alias in your current shell process, use the source command on the bash startup file.  Assuming that you placed this in the <code>.bash_profile</code> file and your working directory contains that file, your command is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span> .bash_profile
</span></code></pre></td></tr></table></div></figure>


<p>It is not necessary to run the source command again when you close and then reopen your terminal.</p>

<h2>Use It</h2>

<p>Navigate to the directory that you would like to initialize with git and enter your alias:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gitinit
</span></code></pre></td></tr></table></div></figure>


<p>Examine the directory and you will find a new .git directory, README.md file, and .gitignore file.  With the unmodified shell script, all files in that were present in the directory (with the exception of the README.md and .gitignore that were just added) are tracked by git and an initial commit is performed with the commit message, &ldquo;Initial commit&rdquo;.</p>

<h2>Modify It</h2>

<h3>Limit Commit by File Type</h3>

<p>You have the option to modify the script so that only a specific filetype is added to the initial commit.  Use the <code>FILE_TYPE</code> variable to indicate the filetype that you intend to commit.  For example, if you want to add all Python files (.py), change the variable to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">FILE_TYPE</span><span class="o">=</span><span class="s2">&quot;*.py&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>While I haven&rsquo;t tested this, it should work with multiple file types using your shell&rsquo;s brace expansion feature.  So, you could add all C source and C header files with a <code>FILE_TYPE</code> variable like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">FILE_TYPE</span><span class="o">=</span><span class="s2">&quot;*.{c,h}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Change Your Initial Commit Message</h3>

<p>And if you would prefer a different initial commit message, just change the <code>INITIAL_COMMIT_MESSAGE</code> variable at the top of the script to any message that you&rsquo;d like.  Make sure that you maintain the double quotes if there are spaces or special characters in the commit message.</p>

<p>If you&rsquo;d like to add the README.md and/or .gitignore files to your commit, move the <code>touch README.md</code> and <code>touch .gitignore</code> commands in the script above the <code>git add "$FILE_TYPE"</code> line (and don&rsquo;t modify the default <code>FILE_TYPE</code> variable).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compress an Entire Directory of CSS Files]]></title>
    <link href="http://sweetme.at/2013/09/24/compress-an-entire-directory-of-css-files/"/>
    <updated>2013-09-24T23:47:00-04:00</updated>
    <id>http://sweetme.at/2013/09/24/compress-an-entire-directory-of-css-files</id>
    <content type="html"><![CDATA[<p>Have an entire directory of CSS files that you need to compress after your most recent set of changes?  Check out this YUI compressor + shell script combination.</p>

<!--More-->


<h2>What it Does</h2>

<p>The YUI Compressor decreases the size of your CSS file with a variety of optimization techniques.  The entire list of modifications is available in <a href="http://yui.github.io/yuicompressor/css.html">the YUI Compressor documentation</a>.</p>

<h2>Dependencies</h2>

<p>The YUI Compressor is a Java .jar file and Java version 1.4+ is necessary to run it on your system.</p>

<h2>Download YUI Compressor</h2>

<p>Release 2.4.8 is <a href="https://github.com/yui/yuicompressor/releases">available on this GitHub repository</a>.  Download and decompress the <code>yuicompressor-2.4.8.jar</code> file.</p>

<h2>Set Up Your Shell Script</h2>

<p>Either create a shell script file with the following shell script or grab it from my <a href="https://github.com/chrissimpkins/scriptacular/blob/master/compress/yuicss.sh">GitHub repository</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="c"># Scriptacular - yuicss.sh</span>
</span><span class='line'><span class="c"># CSS file compression with yuicompressor</span>
</span><span class='line'><span class="c"># Copyright 2013 Christopher Simpkins</span>
</span><span class='line'><span class="c"># MIT License</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Modify YUI_PATH below with the path to your yuicompressor jar file</span>
</span><span class='line'><span class="nv">YUI_PATH</span><span class="o">=</span><span class="s2">&quot;path/to/yuicompressor-2.4.8.jar&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$# </span>-eq 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;Please include the file path(s) for the file(s) that you would like to compress.&quot;</span> 1&gt;&amp;2
</span><span class='line'>  <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">for </span>file in <span class="s2">&quot;$@&quot;</span>;
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f <span class="s2">&quot;$file&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span>java -jar <span class="s2">&quot;$YUI_PATH&quot;</span> -o <span class="s2">&quot;${file%%.*}-min.css&quot;</span> <span class="s2">&quot;$file&quot;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">((</span> <span class="nv">$?</span> <span class="o">))</span>; <span class="k">then</span>
</span><span class='line'><span class="k">          </span><span class="nb">echo</span> <span class="s2">&quot;$file was not able to be minified&quot;</span>
</span><span class='line'>          <span class="nb">exit </span>1
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'><span class="k">          </span><span class="nb">echo</span> <span class="s2">&quot;$file was minified to ${file%%.*}-min.css&quot;</span>
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'><span class="k">  else</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="s2">&quot;Unable to find the style sheet file &#39;$file&#39;.&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">done</span>;
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<p>Change the <code>YUI_PATH</code> variable to the actual path to your <code>yuicompressor-2.4.8.jar</code> file.  Save the file as <code>yuicss.sh</code> and use the command <code>chmod 744 yuicss.sh</code> to make it executable.</p>

<h2>Make a Bash Alias</h2>

<p>Create an alias for your shell script so that you don&rsquo;t have to type the full path to the script each time that you use it.  For example, if you saved the <code>yuicss.sh</code> file on the path <code>~/scripts/yuicss.sh</code>, then open your bash startup file (either <code>.bash_profile</code> or <code>.bashrc</code>) and enter the following line to create the alias minicss:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">minicss</span><span class="o">=</span><span class="s2">&quot;~/scripts/yuicss.sh&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use this alias in your current shell process, use the source command on the bash startup file.  Assuming that you placed this in the <code>.bash_profile</code> file and your working directory contains that file, your command is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span> .bash_profile
</span></code></pre></td></tr></table></div></figure>


<p>It is not necessary to run the source command again when you close and then reopen your terminal.</p>

<h2>Compress an Entire Directory of CSS Files</h2>

<p>Now that you have an alias for your shell script, you can use it to compress as many CSS files contained in a single directory that you&rsquo;d like.  It&rsquo;s all done with a simple command statement.</p>

<p>Navigate to the directory that contains your CSS files and type the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>minicss *.css
</span></code></pre></td></tr></table></div></figure>


<p>This command creates a new, minified version of each CSS file in the directory with a -min suffix added to the filename (i.e. [original filename]-min.css).  The original files are not modified.</p>

<h2>Remove the Minified CSS Files</h2>

<p>If you ever need to remove all of the minified versions of the CSS files that the script creates, navigate to the directory and run the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rm *-min.css
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note</strong>: This command matches all files with the pattern <code>&lt;file&gt;-min.css</code>.  Make sure that there are no minified versions of external CSS files that would match this rule in the working directory (e.g. bootstrap-min.css) because they will be deleted as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Erase Segments of Text Relative to the Cursor Position on Your Bash Command Line]]></title>
    <link href="http://sweetme.at/2013/09/21/how-to-erase-segments-of-text-from-the-cursor-position-on-your-command-line/"/>
    <updated>2013-09-21T17:36:00-04:00</updated>
    <id>http://sweetme.at/2013/09/21/how-to-erase-segments-of-text-from-the-cursor-position-on-your-command-line</id>
    <content type="html"><![CDATA[<p>Further hone your command line chops with these shortcuts that will erase segments of text before or after your cursor position.</p>

<!--More-->


<h2>Delete All Text After the Cursor Position</h2>

<p>This command deletes all text from the cursor position to the end of the line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>CTRL-k
</span></code></pre></td></tr></table></div></figure>


<h2>Delete All Text Before the Cursor Position</h2>

<p>This command deletes all text from the cursor position to the beginning of the line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>CTRL-u
</span></code></pre></td></tr></table></div></figure>


<p>If you use it with your cursor at the end of the command, this shortcut deletes the entire line.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compress and Obfuscate Your JavaScript with this YUI Compressor Script]]></title>
    <link href="http://sweetme.at/2013/09/19/compress-and-obfuscate-your-javascript-with-this-yui-compressor-script/"/>
    <updated>2013-09-19T23:04:00-04:00</updated>
    <id>http://sweetme.at/2013/09/19/compress-and-obfuscate-your-javascript-with-this-yui-compressor-script</id>
    <content type="html"><![CDATA[<p>The YUI Compressor is a tool that was developed by Yahoo for JavaScript obfuscation and compression (and CSS compression).  This shell script makes it simple to minify one or more JS files.</p>

<!--More-->


<h2>What it Does</h2>

<p>According to <a href="http://yui.github.io/yuicompressor/">the documentation</a>:</p>

<blockquote><p>It starts by analyzing the source JavaScript file to understand how it is structured. It then prints out the token stream, omitting as many white space characters as possible, and replacing all local symbols by a 1 (or 2, or 3) letter symbol wherever such a substitution is appropriate (in the face of evil features such as eval or with, the YUI Compressor takes a defensive approach by not obfuscating any of the scopes containing the evil statement).</p></blockquote>

<h2>Dependencies</h2>

<p>The YUI Compressor is a Java .jar file and Java version 1.4+ is necessary to run it on your system.</p>

<h2>Download YUI Compressor</h2>

<p>Release 2.4.8 is <a href="https://github.com/yui/yuicompressor/releases">available on the GitHub repository</a>.  Download and decompress the <code>yuicompressor-2.4.8.jar</code> file.</p>

<h2>Set Up Your Shell Script</h2>

<p>You can use the yuijs.sh script below (also available on <a href="https://github.com/chrissimpkins/scriptacular/blob/master/compress/yuijs.sh">my GitHub repository</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Modify YUI_PATH with the path to the yuicompressor jar file</span>
</span><span class='line'><span class="nv">YUI_PATH</span><span class="o">=</span><span class="s2">&quot;path/to/yuicompressor-2.4.8.jar&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$# </span>-eq 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;Please include the file path(s) for the file(s) that you would like to compress.&quot;</span> 1&gt;&amp;2
</span><span class='line'>  <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">for </span>file in <span class="s2">&quot;$@&quot;</span>;
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f <span class="s2">&quot;$file&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span>java -jar <span class="s2">&quot;$YUI_PATH&quot;</span> -o <span class="s2">&quot;${file%%.*}-min.js&quot;</span> <span class="s2">&quot;$file&quot;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">((</span> <span class="nv">$?</span> <span class="o">))</span>; <span class="k">then</span>
</span><span class='line'><span class="k">          </span><span class="nb">echo</span> <span class="s2">&quot;$file was not able to be minified&quot;</span>
</span><span class='line'>          <span class="nb">exit </span>1
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'><span class="k">          </span><span class="nb">echo</span> <span class="s2">&quot;$file was minified to ${file%%.*}-min.js&quot;</span>
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'><span class="k">  else</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="s2">&quot;Unable to find the javascript file &#39;$file&#39;.&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">done</span>;
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<p>Change the <code>YUI_PATH</code> variable to the actual path to your <code>yuicompressor-2.4.8.jar</code> file.  Save the file and use the command <code>chmod 744 yuijs.sh</code> to make it executable.</p>

<h2>Make a Bash Alias</h2>

<p>Create an alias for your shell script so that you don&rsquo;t have to type the full path to the script each time that you use it.  Let&rsquo;s say that you saved the <code>yuijs.sh</code> file on the path <code>~/scripts/yuijs.sh</code>.   Open your bash startup file (either <code>.bash_profile</code> or <code>.bashrc</code>) and enter the following line to create the alias minijs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">minijs</span><span class="o">=</span><span class="s2">&quot;~/scripts/yuijs.sh&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use this alias in your current shell process, use the source command on the bash startup file.  Assuming that you placed this in the <code>.bash_profile</code> file and your working directory contains that file, your command is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span> .bash_profile
</span></code></pre></td></tr></table></div></figure>


<p>It is not necessary to run the source command again when you close and then reopen your terminal.</p>

<h2>Compress Your JS Files with YUI Compressor</h2>

<p>You&rsquo;re all set.  Now you can use the alias in any directory.  Navigate to a directory that contains one or more JS files and go to town.  It works with as many files as you&rsquo;d like to throw at it.  The file is compressed and obfuscated, and then saved as the original file name with a <code>-min</code> suffix.  The original file is <em>not modified</em> and remains in the same directory.  Hang on to the original because the obfuscated file is no longer human readable (intentionally so as to minimize file size).</p>

<h4>Single File Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>minijs example.js
</span></code></pre></td></tr></table></div></figure>


<p>
creates the file <code>example-min.js</code>.</p>

<h4>Multiple Files Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>minijs example.js example2.js example3.js
</span></code></pre></td></tr></table></div></figure>


<p>creates the files <code>example-min.js</code>, <code>example2-min.js</code>, and <code>example3-min.js</code>.</p>

<h4>All .js Files in Working Directory</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>minijs *.js
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compress Your CSS Output with the SASS Command Line Tool]]></title>
    <link href="http://sweetme.at/2013/09/18/compress-your-css-output-with-the-sass-command-line-tool/"/>
    <updated>2013-09-18T23:41:00-04:00</updated>
    <id>http://sweetme.at/2013/09/18/compress-your-css-output-with-the-sass-command-line-tool</id>
    <content type="html"><![CDATA[<p>Here is a one-liner that compiles your <a href="http://sass-lang.com/">SASS or SCSS files</a> into compressed CSS.</p>

<!--More-->


<p>Use the following command to install the sass Ruby gem:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install sass</span></code></pre></td></tr></table></div></figure>


<h2>Compress Indented Syntax Sass Files</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sass -t compressed path/to/input.sass path/to/output.css</span></code></pre></td></tr></table></div></figure>


<h2>Compress Bracketed Syntax SCSS Files</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sass --scss -t compressed path/to/input.scss path/to/output.css</span></code></pre></td></tr></table></div></figure>


<p>or alternatively, you can use the <code>scss</code> command line tool (which is installed with the sass gem) that defaults to the SCSS syntax.  This avoids the need for the <code>--scss</code> switch.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>scss -t compressed path/to/input.scss path/to/output.css</span></code></pre></td></tr></table></div></figure>


<h2>Use with Compass</h2>

<p>If you are using <a href="http://compass-style.org/">Compass</a> in your project, add the <code>--compass</code> switch to your command so that the Compass imports are available during the compile.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sass -t compressed --compass path/to/input.sass path/to/output.css</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>scss -t compressed --compass path/to/input.scss path/to/output.css</span></code></pre></td></tr></table></div></figure>


<h2>Create an Alias</h2>

<p>Save the command as an alias in your bash startup file (<code>~/.bash_profile</code> or <code>~/.bashrc</code>) to make it quick and easy to use.  Let&rsquo;s call it ccss for &lsquo;compressed css&rsquo;:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias ccss='sass -t compressed --compass --scss'</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>If you want to use the alias in the open terminal window, run a source command on your bash startup file.  For .bash_profile it would look like this: <code>source ~/.bash_profile</code>.  You won&rsquo;t need to do this again the next time that you open the terminal.  The alias will automatically load in the new shell process that you launch.</p>

<p>Then use it on the command line by adding your file paths for the input SCSS file and output CSS file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ccss path/to/input.scss path/to/output.css</span></code></pre></td></tr></table></div></figure>


<p>Have a look through the <a href="http://sass-lang.com/docs.html">SASS documentation</a> on the <code>--watch</code> switch which indicates that sass should watch for changes in your SCSS or SASS files and automatically compile CSS files from the changes.  This may be a better fit for your development workflow than these manual compression commands.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Generic Reusable Install Shell Script That You Can Modify for Your Projects]]></title>
    <link href="http://sweetme.at/2013/09/17/a-generic-reusable-install-shell-script-that-you-can-modify-for-your-projects/"/>
    <updated>2013-09-17T23:13:00-04:00</updated>
    <id>http://sweetme.at/2013/09/17/a-generic-reusable-install-shell-script-that-you-can-modify-for-your-projects</id>
    <content type="html"><![CDATA[<p>Here is a generic bash shell script for single file installs that you can easily modify and include in your own projects.</p>

<!--More-->


<h2>Description</h2>

<p>The script confirms that the target directory path exists and copies the developer-specified file into that path.  If it does not exist, it creates the directory path and then copies the file into the new directory.</p>

<h2>Script</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># Scriptacular - install.sh</span>
</span><span class='line'><span class="c"># Copyright 2013 Christopher Simpkins</span>
</span><span class='line'><span class="c"># MIT License</span>
</span><span class='line'>
</span><span class='line'><span class="nv">TARGET_DIR</span><span class="o">=</span><span class="s2">&quot;path/to/the/install/directory&quot;</span>
</span><span class='line'><span class="nv">INSTALL_FILE</span><span class="o">=</span><span class="s2">&quot;your-file.txt&quot;</span>
</span><span class='line'><span class="nv">SUCCESS_MSG</span><span class="o">=</span><span class="s2">&quot;Sexy message for user goes here!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -d <span class="s2">&quot;$TARGET_DIR&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span>cp <span class="s2">&quot;$INSTALL_FILE&quot;</span> <span class="s2">&quot;$TARGET_DIR&quot;</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;$SUCCESS_MSG&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;Creating the install directory path...&quot;</span>
</span><span class='line'>  mkdir -p <span class="s2">&quot;$TARGET_DIR&quot;</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;Done. Installing &#39;$INSTALL_FILE&#39;...&quot;</span>
</span><span class='line'>  cp <span class="s2">&quot;$INSTALL_FILE&quot;</span> <span class="s2">&quot;$TARGET_DIR&quot;</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;$SUCCESS_MSG&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<p>Save the script as <code>install.sh</code>.</p>

<h2>Customization</h2>

<ol>
<li>Modify <code>TARGET_DIR</code> with the target install directory</li>
<li>Modify <code>INSTALL_FILE</code> with the path to the file that is to be installed</li>
<li>Modify <code>SUCCESS_MSG</code> with the message to present to the user after a successful install</li>
</ol>


<h2>Use</h2>

<p>The user will need navigate to the directory that contains <code>install.sh</code> in your release and set the file permissions so that they can execute the script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chmod 744 install.sh
</span></code></pre></td></tr></table></div></figure>


<p>and then use it with the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./install.sh
</span></code></pre></td></tr></table></div></figure>


<h2>Script Repository</h2>

<p>The script is <a href="https://github.com/chrissimpkins/scriptacular/blob/master/install/install.sh">available on GitHub</a>.</p>

<h2>License</h2>

<p><a href="https://github.com/chrissimpkins/scriptacular/blob/master/LICENSE">MIT license</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Rapidly Navigate to the Beginning or End of Your Bash Command]]></title>
    <link href="http://sweetme.at/2013/09/16/how-to-rapidly-navigate-to-the-beginning-or-end-of-your-bash-command/"/>
    <updated>2013-09-16T08:34:00-04:00</updated>
    <id>http://sweetme.at/2013/09/16/how-to-rapidly-navigate-to-the-beginning-or-end-of-your-bash-command</id>
    <content type="html"><![CDATA[<p>Drop the backward and forward arrows.  These two shortcuts will make you more nimble on the command line.</p>

<!--More-->


<h2>Jump to the Beginning of Your Command</h2>

<p>This one takes you to the beginning of your command string from any position in the command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CTRL-a</span></code></pre></td></tr></table></div></figure>


<h2>Jump to the End of Your Command</h2>

<p>… and this one takes you directly to the end:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CTRL-e</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[B.S. Tech Job Title Generator]]></title>
    <link href="http://sweetme.at/2013/09/13/b.s.-tech-job-title-generator/"/>
    <updated>2013-09-13T15:38:00-04:00</updated>
    <id>http://sweetme.at/2013/09/13/b.s.-tech-job-title-generator</id>
    <content type="html"><![CDATA[<p>Generate a glossy new title for yourself with this little gem from Tim Pietrusky… and enjoy your weekend.</p>

<!--More-->


<p data-height="569" data-theme-id="0" data-slug-hash="CxiHF" data-user="TimPietrusky" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/chrissimpkins/pen/CxiHF'>Bullshit Job Title Generator</a> by Tim Pietrusky (<a href='http://codepen.io/TimPietrusky'>@TimPietrusky</a>) on <a href='http://codepen.io'>CodePen</a></p>


<script async src="http://codepen.io/assets/embed/ei.js"></script>


<p><small>Source: <a href="http://cdpn.io/CxiHF">Tim Pietrusky on Codepen</a></small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Logs with Color and Graphs]]></title>
    <link href="http://sweetme.at/2013/09/13/git-logs-with-color/"/>
    <updated>2013-09-13T09:44:00-04:00</updated>
    <id>http://sweetme.at/2013/09/13/git-logs-with-color</id>
    <content type="html"><![CDATA[<p>Want to add some color to your Git log?  Check out this git log configuration that gives you one commit per line, a commit graph, abbreviated commit ID&rsquo;s, relative dates, &amp; commit author all bundled up in color coordinated text.</p>

<!--More-->


<h2>Git Logs with Graphs and Color</h2>

<p>Navigate to your git initialized directory (that includes previous commits) and use this command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --date=relative</span></code></pre></td></tr></table></div></figure>


<p><small>Source: <a href="https://twitter.com/twittmonkey">Patryk Małek</a> in comments on <a href="https://coderwall.com/p/euwpig">this Coderwall post</a> by <a href="https://twitter.com/filipekiss">Filipe Kiss</a></small></p>

<p>and your output will look like this:
<img src="http://sweetme.at/images/git-log-color-com.png" alt="image" /></p>

<h2>Conserve ATP, Make a Git Alias</h2>

<p>Save yourself keystrokes by creating a git alias so that you can open your colorful new log style as if you were using any built-in git command.</p>

<h3>Method 1</h3>

<p>Filipe and Patryk demonstrate how to configure the git alias &ldquo;lg&rdquo; in the thread.  For the above command, it looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global alias.lg "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --date=relative"</span></code></pre></td></tr></table></div></figure>


<p>Make sure that you keep that <code>--global</code> switch if you want this included as part of your global git configuration.</p>

<p>To change the alias name, modify the <code>alias.lg</code> string with the alias that you&rsquo;d like to use.  For example, to call it purtylog you would change it to <code>alias.purtylog</code>.</p>

<h3>Method 2</h3>

<p>Alternatively, you can add your new alias to your <code>~/gitconfig</code> file.  Open the file in an editor and (if you have not already done so) add an <code>[alias]</code> section to the file with the following alias definition for lg:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[alias]
</span><span class='line'>    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --date=relative</span></code></pre></td></tr></table></div></figure>


<h2>Use It</h2>

<p>With both methods, you then view your new log style with the following command (using your new alias):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git lg</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Maximize PNG Image Compression with OptiPNG]]></title>
    <link href="http://sweetme.at/2013/09/11/how-to-maximize-png-image-compression-with-optipng/"/>
    <updated>2013-09-11T23:11:00-04:00</updated>
    <id>http://sweetme.at/2013/09/11/how-to-maximize-png-image-compression-with-optipng</id>
    <content type="html"><![CDATA[<p>OptiPNG is an open source, lossless PNG file compression application that performs well on compression testing.  Here&rsquo;s how you maximize your compression ratios with it.</p>

<!--More-->


<h2>Install</h2>

<p>OptiPNG is an open source application that is <a href="http://optipng.sourceforge.net/">available on SourceForge</a>.  Documentation in a pdf format is available <a href="http://optipng.sourceforge.net/optipng-0.7.4.man.pdf">here</a>.</p>

<p>On *nix systems, you can build and install it with the standard set of autotools commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./configure
</span><span class='line'>make && sudo make install</span></code></pre></td></tr></table></div></figure>


<p>Windows users get an .exe binary in the zip archive on the download page.</p>

<h2>PNG Compression with OptiPNG</h2>

<p>I have been testing a few lossless PNG compression applications with PNG files that I generated from both Photoshop CS6 and Pixelmator.  These included files ranging from 1.2 kB to 1.5 MB that were saved in each application&rsquo;s default RGB + alpha 8 bit format, as well as in the Photoshop &ldquo;Save for web&rdquo; compressed format.  Generally speaking, the best compression / time command based upon my testing on a MacBook Pro (2.4 GHz Intel Core i7, 8GB RAM) is:</p>

<h3>Near Maximal Compression + Fast</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>optipng -o2 -strip all &lt;image.png&gt;</span></code></pre></td></tr></table></div></figure>


<p>This command strips all meta data and compresses the image data.  It led to a 18% decrease in the default Pixelmator PNG size and a 95% decrease in the default Photoshop PNG size.</p>

<p>If you want to maximize your compression ratio with a fairly significant time tradeoff at larger file sizes, you can use the <code>-o7</code> switch.</p>

<h3>Maximal Compression + Not So Fast (for Large File Sizes)</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>optipng -o7 -strip all &lt;image.png&gt;</span></code></pre></td></tr></table></div></figure>


<p>In the files that I tested, this led to a modest ~1 percentage point gain, though your results may vary depending upon the complexity of your image.</p>

<p>The Photoshop CS6 &ldquo;Save for web&rdquo; PNG-8 compression format with 256 colors, bicubic sampling, no metadata, &amp; diffusion dither resulted in a file that had near maximal compression by current standards.  On a 100x100 pixel image, I was only able to wring out another 2.4% of the original file size with the latter optipng command.</p>

<h2>File Size by OptiPNG Switch</h2>

<p>Here are the data for the default 100x100px Photoshop PNG file.
<img src="http://sweetme.at/images/optipng-compression-tests.png" alt="image" /></p>

<h2>Learn More About PNG Compression</h2>

<p>Want more background?  <a href="http://optipng.sourceforge.net/pngtech/optipng.html">This guide by Cosmin Truţa</a> is a good resource.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Turn Your Browser into a Text Editor with Syntax Highlighting]]></title>
    <link href="http://sweetme.at/2013/09/10/how-to-turn-your-browser-into-a-text-editor-with-syntax-highlighting/"/>
    <updated>2013-09-10T19:31:00-04:00</updated>
    <id>http://sweetme.at/2013/09/10/how-to-turn-your-browser-into-a-text-editor-with-syntax-highlighting</id>
    <content type="html"><![CDATA[<p>Pop this script into your browser&rsquo;s navigation bar and code away in the browser with syntax highlighting for multiple languages.</p>

<!--More-->


<h2>Script</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>data:text/html, <span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span><span class="nc">.e</span><span class="p">{</span><span class="k">position</span><span class="o">:</span><span class="k">absolute</span><span class="p">;</span><span class="k">top</span><span class="o">:</span><span class="m">0</span><span class="p">;</span><span class="k">right</span><span class="o">:</span><span class="m">0</span><span class="p">;</span><span class="k">bottom</span><span class="o">:</span><span class="m">0</span><span class="p">;</span><span class="k">left</span><span class="o">:</span><span class="m">0</span><span class="p">;}</span><span class="nt">&lt;/style&gt;&lt;div</span> <span class="na">class=</span><span class="s">&quot;e&quot;</span> <span class="na">id=</span><span class="s">&quot;editor&quot;</span><span class="nt">&gt;&lt;/div&gt;&lt;script </span><span class="na">src=</span><span class="s">&quot;http://d1n0x3qji82z53.cloudfront.net/src-min-noconflict/ace.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;&lt;/script&gt;&lt;script&gt;</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">ace</span><span class="p">.</span><span class="nx">edit</span><span class="p">(</span><span class="s2">&quot;editor&quot;</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">setTheme</span><span class="p">(</span><span class="s2">&quot;ace/theme/textmate&quot;</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">getSession</span><span class="p">().</span><span class="nx">setMode</span><span class="p">(</span><span class="s2">&quot;ace/mode/python&quot;</span><span class="p">);</span><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><small>Source: <a href="https://gist.github.com/jdkanani/4670615">jdkanani Gist on GitHub</a> with language + theme modifications</small></p>

<h2>Instructions</h2>

<p>Copy the script above, paste it into your browser navigation bar, and hit Enter/Return.  Through the power of <a href="http://ace.c9.io/">Ace</a>, your browser will turn into a text editor with automatic line numbers, code folding, and syntax highlighting (in this case for Python).</p>

<h2>Browser Screenshot with a Python Script</h2>

<p><img src="http://sweetme.at/images/ace_browser_editor.png" alt="image" /></p>

<h2>Customize Your Language</h2>

<p>Ace supports over 60 languages.  To change the syntax highlighter in the script, modify the line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">e</span><span class="p">.</span><span class="nx">getSession</span><span class="p">().</span><span class="nx">setMode</span><span class="p">(</span><span class="s2">&quot;ace/mode/python&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>with the language mode that you&rsquo;d like to use.  You can <a href="https://github.com/ajaxorg/ace/tree/master/lib/ace/mode">find the list of supported language modes in the GitHub repository</a>.  Here is how you specify the JavaScript syntax highlighter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">e</span><span class="p">.</span><span class="nx">getSession</span><span class="p">().</span><span class="nx">setMode</span><span class="p">(</span><span class="s2">&quot;ace/mode/javascript&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Customize Your Editor Theme</h2>

<p>The Ace editor supports over 20 different text editor themes too.  To change the editor theme, modify the line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">e</span><span class="p">.</span><span class="nx">setTheme</span><span class="p">(</span><span class="s2">&quot;ace/theme/textmate&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>with <a href="https://github.com/ajaxorg/ace/tree/master/lib/ace/theme">any of the supported themes</a>.  Here is how you switch to Monokai:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">e</span><span class="p">.</span><span class="nx">setTheme</span><span class="p">(</span><span class="s2">&quot;ace/theme/monokai&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>^5</h2>

<p>Kudos to <a href="https://gist.github.com/jdkanani/4670615">jdkanani</a> for this script.  Head over to his repository and show him some love if you use it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swizzle, a Markdown Text Editor Theme for Mou and LightPaper]]></title>
    <link href="http://sweetme.at/2013/09/09/swizzle-a-markdown-text-editor-theme/"/>
    <updated>2013-09-09T22:13:00-04:00</updated>
    <id>http://sweetme.at/2013/09/09/swizzle-a-markdown-text-editor-theme</id>
    <content type="html"><![CDATA[<p>Swizzle is a dark Markdown theme that I released on GitHub for the <a href="http://mouapp.com/">Mou</a> and <a href="http://clockworkengine.com/lightpaper-mac/">LightPaper</a> text editors.</p>

<!--More-->


<h2>Demo</h2>

<p><img src="https://raw.github.com/chrissimpkins/swizzle/master/img/swizzle_demo.png" alt="Swizzle Demo" /></p>

<h2>Download</h2>

<p>Swizzle is available on <a href="https://github.com/chrissimpkins/swizzle">GitHub</a> <i class="icon-github"></i></p>

<p>You can clone it with this URL:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://github.com/chrissimpkins/swizzle.git</span></code></pre></td></tr></table></div></figure>


<h2>Install</h2>

<p>Place the <code>Swizzle.txt</code> file in your application Themes directory.</p>

<p><strong>Mou Themes</strong> : <code>~/Library/Application Support/Mou/Themes</code></p>

<p><strong>LightPaper Themes</strong> : <code>~/.lightpaper/Themes</code></p>

<p>Open your Markdown editor, open the Preferences pane, &amp; select the Swizzle theme in the dropdown for the text editor themes (not the preview themes!).</p>

<h2>Specs</h2>

<p><strong>Fonts</strong>: Helvetica Neue, Helvetica, &amp; Menlo</p>

<p><strong>Palette</strong>: <a href="http://www.colourlovers.com/palette/444487/Curiosity_Killed">Curiosity Killed</a> with a few additions {^5 Miaka}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Read RSS Feeds in Your Terminal on Linux and Mac OSX]]></title>
    <link href="http://sweetme.at/2013/09/05/read-rss-feeds-in-your-terminal/"/>
    <updated>2013-09-05T15:01:00-04:00</updated>
    <id>http://sweetme.at/2013/09/05/read-rss-feeds-in-your-terminal</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a one liner that allows you to read RSS feed titles in your terminal window.</p>

<!--More-->


<h2>cURL + grep + sed = Terminal RSS Feeds</h2>

<p>Here is the the generic command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl "THE_RSS_FEED"  2&gt;/dev/null | grep "&lt;title&gt;" | sed -e "s/.*\&lt;title\&gt;\(.*\)\&lt;\/title\&gt;.*/»\ \1/g" | less</span></code></pre></td></tr></table></div></figure>


<p>Replace <code>THE_RSS_FEED</code> with the URL of the syndicated site feed (surrounded by the double quotes) and confirm that the raw feed XML displays item titles with a plain &lt;title&gt; tag (i.e. without CDATA tags or other XML detritus).</p>

<p>If you&rsquo;d like to prepend a different list symbol for the titles, replace the <code>»</code> character with another ascii symbol or symbols.</p>

<p>I have been playing around with this using the <a href="http://chrissimpkins.github.io/tweetledee/">Tweetledee</a> files to view Twitter search, favorites, list, and user timeline feeds.  The formatting for up to 140 chars could use a bit of work but it is functional.</p>

<h2>Do it Without less</h2>

<p>The command uses the less shell command to create paginated formatting.  If you prefer not to use this, just remove the last pipe (|) and the less command at the end of the command string.</p>

<p><small>Source: I made slight modifications to the shell command posted by <a href="http://www.commandlinefu.com/commands/view/12671/extract-xml-rss-etc-by-tags-such-as-or-or-">c3w on commandlinefu.com</a></small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Mute the Standard Output Stream in a Bash Shell Command]]></title>
    <link href="http://sweetme.at/2013/09/04/how-to-mute-the-standard-output-stream-in-a-bash-shell-command/"/>
    <updated>2013-09-04T23:46:00-04:00</updated>
    <id>http://sweetme.at/2013/09/04/how-to-mute-the-standard-output-stream-in-a-bash-shell-command</id>
    <content type="html"><![CDATA[<p>Did the developer forget a verbosity switch?  Here is the solution.</p>

<!--More-->


<h2>Mute a Bash Command</h2>

<p>Append the following bash idiom to your command and you will have silence:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&-</span></code></pre></td></tr></table></div></figure>


<p>&lt;crickets&gt;</p>

<p><small>Source: <a href="http://stackoverflow.com/questions/2292847/how-to-silent-output-in-a-bash-script">Eduardo Cuomo on SO</a></small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Open a File in Sublime Text 2 or 3 from the Command Line on Mac OSX]]></title>
    <link href="http://sweetme.at/2013/09/03/how-to-open-a-file-in-sublime-text-2-or-3-from-the-command-line-on-mac-osx/"/>
    <updated>2013-09-03T08:15:00-04:00</updated>
    <id>http://sweetme.at/2013/09/03/how-to-open-a-file-in-sublime-text-2-or-3-from-the-command-line-on-mac-osx</id>
    <content type="html"><![CDATA[<p>You can open a file in <a href="http://www.sublimetext.com/">Sublime Text</a> from the Mac command line.  Here is how you do it with versions 2 and 3 of this popular text editor.</p>

<!--More-->


<h2>Sublime Text 2</h2>

<p>Create a symbolic link to the subl binary with this command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ln -s "/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl" /usr/local/bin/subl</span></code></pre></td></tr></table></div></figure>


<h2>Sublime Text 3</h2>

<p>The install path is different in Sublime Text 3.  Create the symbolic link like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ln -s "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl" /usr/local/bin/subl</span></code></pre></td></tr></table></div></figure>


<h2>Confirm that it Works</h2>

<p>Confirm that it works by accessing the help file with the <code>--help</code> switch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>subl --help</span></code></pre></td></tr></table></div></figure>


<p>If you receive an error, make sure that <code>/usr/local/bin</code> is on your PATH.</p>

<h2>Use it on the Command Line</h2>

<p>Use the filename as the argument to subl.  If there are spaces in the filename path, make sure that you surround the entire path with double quotes or escape the spaces.</p>

<p>Here is an example with the file &lsquo;test.txt&rsquo;:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>subl test.txt</span></code></pre></td></tr></table></div></figure>


<h2>Documentation</h2>

<p>Here are links to the <a href="">Sublime Text 2</a> and <a href="http://www.sublimetext.com/docs/3/osx_command_line.html">Sublime Text 3</a> command line use documentation if you&rsquo;d like to learn more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Open a URL in the Default Browser Across OS Platforms]]></title>
    <link href="http://sweetme.at/2013/09/02/how-to-open-a-url-in-the-default-browser-across-os-platforms/"/>
    <updated>2013-09-02T14:39:00-04:00</updated>
    <id>http://sweetme.at/2013/09/02/how-to-open-a-url-in-the-default-browser-across-os-platforms</id>
    <content type="html"><![CDATA[<p>Programmatically launching a URL in the default browser across OS platforms is not as widely supported as you might think.  The Python webbrowser module provides fairly broad support for this.  Here&rsquo;s a shell one-liner and a Python script that allow you to do it.</p>

<!--More-->


<h2>Shell Command</h2>

<p>You can run this as a one liner in your shell with the following syntax:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python -m webbrowser &lt;URL&gt;</span></code></pre></td></tr></table></div></figure>


<p>To open the URL in a new tab, use the <code>-t</code> switch, and to open it in a new browser window, use the <code>-n</code> switch like this:</p>

<h3>Open Sweetmeat in a New Tab</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python -m webbrowser -t "http://sweetme.at"</span></code></pre></td></tr></table></div></figure>


<h3>Open Sweetmeat in a New Window</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python -m webbrowser -n "http://sweetme.at"</span></code></pre></td></tr></table></div></figure>


<h2>Python Scripts</h2>

<p>Import the webbrowser module and use the following module function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">webbrowser</span>
</span><span class='line'>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="s">&quot;http://sweetme.at&quot;</span>
</span><span class='line'><span class="n">webbrowser</span><span class="o">.</span><span class="n">open_new_tab</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This opens the URL in a new tab with a fallback to a new browser window if this fails.  To make a new window the default, use the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">webbrowser</span>
</span><span class='line'>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="s">&quot;http://sweetme.at&quot;</span>
</span><span class='line'><span class="n">webbrowser</span><span class="o">.</span><span class="n">open_new</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Python Docs</h2>

<p>Here are the webbrowser module docs for Python versions <a href="http://docs.python.org/2.7/library/webbrowser.html">2.7</a> and <a href="http://docs.python.org/3.3/library/webbrowser.html">3.3</a>. There are a few more examples and details on possible exceptions that are raised with these scripts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Special Characters in Your Shell]]></title>
    <link href="http://sweetme.at/2013/08/30/special-characters-in-your-shell/"/>
    <updated>2013-08-30T17:21:00-04:00</updated>
    <id>http://sweetme.at/2013/08/30/special-characters-in-your-shell</id>
    <content type="html"><![CDATA[<p>All of these characters have special functions in the shell and need to be escaped with a backslash <code>\&amp;</code> or surrounded with single quotation marks <code>'&amp;'</code> if you intend to use the character itself, rather than the shell-specific meaning, on the command line.  Here is the list:</p>

<!--More-->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* ? & ! ~ $ ; | ' " ` ( ) [ ] &lt; &gt; { } \ / </span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Determine if a Directory Has Been Initialized with Git]]></title>
    <link href="http://sweetme.at/2013/08/29/how-to-determine-if-a-directory-has-been-initialized-with-git/"/>
    <updated>2013-08-29T23:56:00-04:00</updated>
    <id>http://sweetme.at/2013/08/29/how-to-determine-if-a-directory-has-been-initialized-with-git</id>
    <content type="html"><![CDATA[<p>Has <code>git init</code> been run on the directory?  Here&rsquo;s how you find out.</p>

<!--More-->


<p>Git initialization of an existing directory with the command <code>git init</code> results in a subdirectory that is named <code>.git</code>.  It contains your git goodies.  To determine whether the directory has been git initialized, simply check for the presence of the <code>.git</code> subdirectory.  Here&rsquo;s how to do it with C or C++:</p>

<figure class='code'><figcaption><span>Git or No Git?</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;sys/stat.h&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">stat</span> <span class="n">sb</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">pathname</span> <span class="o">=</span> <span class="s">&quot;.git&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">stat</span><span class="p">(</span><span class="n">pathname</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sb</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">S_ISDIR</span><span class="p">(</span><span class="n">sb</span><span class="p">.</span><span class="n">st_mode</span><span class="p">))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// .git directory is present so initialization has occurred, do git stuff in this block</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// .git initialization has not occurred, handle that here</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Directory Exists in Other Languages</h2>

<p>Trying to do this in another language?  A quick search for &ldquo;directory exists&rdquo; in your language du jour generally leads to the information that you need.</p>

<p>Here is how you determine whether a directory exists in <a href="http://stackoverflow.com/questions/6940394/how-to-use-javascript-to-determine-whether-a-directory-exists">JavaScript</a>, <a href="http://php.net/manual/en/function.file-exists.php">PHP</a>, <a href="http://docs.python.org/2/library/os.path.html#os.path.exists">Python</a>, and <a href="http://stackoverflow.com/questions/1085218/how-to-check-if-a-given-directory-exists-in-ruby">Ruby</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Local HTTP Server with Ruby]]></title>
    <link href="http://sweetme.at/2013/08/28/simple-local-http-server-with-ruby/"/>
    <updated>2013-08-28T15:12:00-04:00</updated>
    <id>http://sweetme.at/2013/08/28/simple-local-http-server-with-ruby</id>
    <content type="html"><![CDATA[<p><a href="http://sweetme.at/2013/08/21/simple-local-http-server-with-python/">You can do it with Python</a>.  And you can do it with Ruby.  The Ruby one line command for a local HTTP server.</p>

<!--More-->


<h2>One Line Ruby HTTP Server</h2>

<p>Navigate to your local site directory and then use the following command:</p>

<figure class='code'><figcaption><span>One Line Ruby HTTP Server</span><a href='https://coderwall.com/p/ocnxeq'>Source</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ruby</span> <span class="o">-</span><span class="n">run</span> <span class="o">-</span><span class="n">e</span> <span class="n">httpd</span> <span class="o">.</span> <span class="o">-</span><span class="nb">p</span> <span class="mi">8000</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can access your site at <code>http://localhost:8000</code>. If you want to change the port, modify the argument after the <code>-p</code> switch.  I confirmed that this works with Ruby v1.9.3.</p>

<h2>Ruby?</h2>

<p>Don&rsquo;t know what version of Ruby you have (or if it is installed)? Use the command <code>ruby --version</code> and you will know.</p>

<p><small><i class="icon-link"></i> Kudos <a href="https://twitter.com/dallas_reedy">Dallas Reedy</a> via <a href="https://coderwall.com/p/ocnxeq">Coderwall</a></small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Unpack a tar.gz and tar.bz2 Archive on the Command Line]]></title>
    <link href="http://sweetme.at/2013/08/28/how-to-unpack-a-tar.gz-and-tar.bz2-archive-on-the-command-line/"/>
    <updated>2013-08-28T09:00:00-04:00</updated>
    <id>http://sweetme.at/2013/08/28/how-to-unpack-a-tar.gz-and-tar.bz2-archive-on-the-command-line</id>
    <content type="html"><![CDATA[<p>No matter how many times I use these commands, I always need to look up the switches to decompress and unpack a compressed tar archive.  Here they are for those who have the same problem.</p>

<!--More-->


<h2>Decompress and Unpack a tar.gz Archive</h2>

<figure class='code'><figcaption><span>Decompress and Unpack a tar.gz Archive</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tar -xvzf &lt;filename&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>Decompress and Unpack a tar.bz2 Archive</h2>

<figure class='code'><figcaption><span>Decompress and Unpack a tar.bz2 Archive</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tar -xvjf &lt;filename&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>What the Switches Do</h2>

<p><code>-x</code> : extract the tar archive</p>

<p><code>-v</code> : verbose output so that you see what files are being unpacked</p>

<p><code>-f</code> : indicates that you are providing tar with an archive filename</p>

<p><code>-z</code> : runs gunzip to decompress .gz files</p>

<p><code>-j</code> : runs bunzip2 to decompress .bz2 files</p>
]]></content>
  </entry>
  
</feed>
